syntax = "proto3";
import "EntityData.proto";

option java_package = "org.terasology.protobuf";
option java_outer_classname = "NetData";
option optimize_for = SPEED;

message NetMessage {
    oneof message {
        JoinMessage join = 18;
        // Authentication
        HandshakeMessage handShakeMessage = 105;
        NewIdentityRequest newIdentityRequest = 101;
        ProvisionIdentity provisionIdentity = 102;

        ModuleDataHeader moduleDataHeader = 20;
        ModuleData moduleData = 21;
        JoinCompleteMessage joinComplete = 22;
        ServerInfoRequest serverInfoRequest = 15;
        ServerInfoMessage serverInfo = 16;
        ModuleMessage moduleMessage = 17;

        EventMessage eventMessage = 35;
        BlockEventMessage blockEventMessage = 37;

        HeartBeatMessage heartBeat = 36;
        InvalidateChunkMessage invalidateChunk = 3;
        CreateEntityMessage createEntity = 5;
        RemoveEntityMessage removeEntity = 6;
        UpdateEntityMessage updateEntity = 7;
        BlockFamilyRegisteredMessage blockFamilyRegistered = 25;
        BlockChangeMessage blockChange = 4;
        ChunkStore chunkInfo = 2;
        ExtraDataChangeMessage extraDataChange = 11;
    }
}

message ServerInfoRequest {

}

message HeartBeatMessage {
    int64 time = 9;
}

message HandshakeMessage {
    optional HandshakeHello handshakeHello = 100;
    optional HandshakeVerification handshakeVerification = 103;
}

message BlockEventMessage {
    Event event = 2;
    Vector3iData targetBlockPos = 3;
}

message EventMessage {
    Event event = 2;
    int32 targetId = 1;
}

message ModuleMessage {
    repeated ModuleRequest moduleRequest = 19;
}

message ModuleRequest {
    optional string moduleId = 1;
}

message HandshakeHello {
    optional bytes random = 1;
    optional Certificate certificate = 2;
    optional sint64 timestamp = 3;
}

message NewIdentityRequest {
    optional bytes preMasterSecret = 1;
    optional bytes random = 2;
}

message ProvisionIdentity {
    optional bytes encryptedCertificates = 1;
}

message CertificateSet {
    optional Certificate publicCertificate = 1;
    optional bytes privateExponent = 2;
}

message HandshakeVerification {
    optional bytes signature = 1;
}

message Certificate {
    optional string id = 1;
    optional bytes modulus = 2;
    optional bytes exponent = 3;
    optional bytes signature = 4;
}

message BlockFamilyRegisteredMessage {
    repeated string blockUri = 1;
    repeated int32 blockId = 2;
}

message InvalidateChunkMessage {
    Vector3iData pos = 1;
}

message BlockChangeMessage {
    Vector3iData pos = 1;
    int32 newBlock = 2;
}

message ExtraDataChangeMessage {
    int32 index = 1;
    int32 newData = 3;
    Vector3iData pos = 2;
}

message Vector3iData {
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
}

message JoinMessage {
    optional string name = 1;
    optional string version = 2;
    optional sint32 viewDistanceLevel = 3;
    optional Color color = 4;
}

message Color {
    uint32 rgba = 1;
}

message JoinCompleteMessage {
    optional int32 clientId = 1;
}

message ServerInfoMessage {
    repeated ModuleInfo module = 1;
    repeated sint32 blockId = 2;
    repeated string blockName = 3;
    repeated SerializationInfo component = 4;
    repeated SerializationInfo event = 5;
    repeated int32 assetId = 6;
    repeated string assetUri = 7;
    repeated string registerBlockFamily = 8;
    repeated WorldInfo worldInfo = 9;

    optional string errorMessage = 12;
    optional string version = 15;
    optional string gameName = 16;
    optional int64 time = 17;
    optional float reflectionHeight = 18;
    optional string MOTD = 19;
    optional int32 onlinePlayersAmount = 20;
}

message WorldInfo {
    optional string title = 1;
    optional int64 time = 2;
}

message SerializationInfo {
    optional string name = 1;
    optional int32 id = 2;
    repeated string fieldName = 3;
    optional bytes fieldIds = 4;
}

message ModuleInfo {
    optional string moduleId = 1;
    optional string moduleVersion = 2;
}

message ModuleDataHeader {
    optional string id = 1;
    optional string version = 2;
    optional int64 size = 3;
    optional string error = 15;
}

message ModuleData {
    bytes module = 1;
}

message ModuleSendError {
    string message = 1;
}

message CreateEntityMessage {
    PackedEntity entity = 1;
//    optional Vector3iData blockPos = 2;
}

message UpdateEntityMessage {
    PackedEntity entity = 1;
    int32 netId = 2;
}

message RemoveEntityMessage {
    repeated int32 netId = 1;
}
